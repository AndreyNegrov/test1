<style>
    .picture-container {
        float: left;
        width: 100%;
        margin-top: -27px;
    }

    #empty-card-picture {
        margin: 0 auto;
        width: 100px;
        height: 93px;
        border: 2px solid #d5d5d5;
        border-radius: 5px;
        display: block;
    }

    #train-container {
        background: #e7ebf0;
        width: 100%;
        max-width: 500px;
        height: 100%;
        margin: 0 auto;
        overflow: auto;
        position: relative;
    }

    body {
        font-family: 'Trebuchet MS';
        text-align: center;
        color: #6f6f6f;
        margin: 0;
        height: 100%;
    }

    html {
        line-height: 1.15;
        height: 100%;
    }

    .card {
        margin: 50px 25px 0 25px;
        background: white;
        width: calc(100% - 50px);
        height: calc(100% - 130px);
        position: relative;
        border: 2px solid white;
    }

    .empty-card-content-container {
        width: 90%;
        margin: 0 auto;
        height: calc(100% - 56px);
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
    }

    .big-p {
        font-size: 17pt;
    }

    .little-p {
        font-size: 15pt;
    }

    .next-arrow {
        width: 60%;
        position: absolute;
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }

    #empty-next-button {
        position: absolute;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        background-color: #5682a3;
        cursor: pointer;
        right: 0;
        bottom: 0;
        z-index: 1;
    }

    /*типа запрет ротации моб устройства*/
    @media only screen and (min-width: 415px) and (max-width: 1279px) {
        body {
            display: none
        }

        html:before {
            content: 'Переверните устройство в портретный режим';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            margin: auto;
            background: #fff;
            z-index: 999;
            text-align: center;
            width: 80%;
            height: 80px;
            font-family: 'Trebuchet MS';
            font-size: 16pt;
            color: #6f6f6f;
        }
    }
</style>

<meta name="viewport" content="width=100px, initial-scale=1, maximum-scale=1">

<body onload="loadPage()">
<div id="train-container">
    <div class="card">
        <div class="picture-container">
            <img id="empty-card-picture" src="/mr_teacher.jpg">
        </div>
        <div class="empty-card-content-container">
            <div class="big-p">
                У Вас недостаточно слов.
            </div>
            <div class="little-p">
                Чтобы начать тренировку, Вы должны иметь как минимум 7 неизученных слов (одно слово появляется каждые 2
                часа)
            </div>
            <div class="big-p">
                Вам доступны слова для повторения.
            </div>
            <div style="position: relative">
                <div id="empty-next-button" onclick="startRepeat()">
                    <img src="../../trainings/General/images/right-arrow.png" class="next-arrow">
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let trainingHandler = null;
    let link = null;

    function loadPage() {


        link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = '/trainings/General/css/generalStyle.css';
        document.head.append(link);


        new Promise(function (resolve) {
            const script = document.createElement('script');
            script.src = '/trainings/General/js/TrainingHandler.js';
            script.onload = () => resolve();
            document.head.append(script);
        }).then(() => {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', '{{ path('training_repeat_data', {
                'session': session
            }) }}', true);
            xhr.send();
            xhr.onreadystatechange = () => {
                if (xhr.readyState !== 4) return;
                if (xhr.status === 200) {
                    trainingHandler = new TrainingHandler('{{ session }}', JSON.parse(xhr.responseText).items, JSON.parse(xhr.responseText).trainings);
                }
            };
        });

    }

    function startRepeat() {

        const interval = setInterval(() => {
            if (trainingHandler) {
                clearInterval(interval);
                trainingHandler.nextTraining();
            }
        }, 10);
    }

</script>

</body>



